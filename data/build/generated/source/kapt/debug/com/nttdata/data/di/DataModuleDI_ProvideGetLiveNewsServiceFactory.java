// Generated by Dagger (https://dagger.dev).
package com.nttdata.data.di;

import com.nttdata.data.services.GetLiveNewsService;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("com.nttdata.data.di.ApiEndPoint")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModuleDI_ProvideGetLiveNewsServiceFactory implements Factory<GetLiveNewsService> {
  private final DataModuleDI module;

  private final Provider<String> urlProvider;

  private final Provider<OkHttpClient> clientProvider;

  public DataModuleDI_ProvideGetLiveNewsServiceFactory(DataModuleDI module,
      Provider<String> urlProvider, Provider<OkHttpClient> clientProvider) {
    this.module = module;
    this.urlProvider = urlProvider;
    this.clientProvider = clientProvider;
  }

  @Override
  public GetLiveNewsService get() {
    return provideGetLiveNewsService(module, urlProvider.get(), clientProvider.get());
  }

  public static DataModuleDI_ProvideGetLiveNewsServiceFactory create(DataModuleDI module,
      Provider<String> urlProvider, Provider<OkHttpClient> clientProvider) {
    return new DataModuleDI_ProvideGetLiveNewsServiceFactory(module, urlProvider, clientProvider);
  }

  public static GetLiveNewsService provideGetLiveNewsService(DataModuleDI instance, String url,
      OkHttpClient client) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetLiveNewsService(url, client));
  }
}
