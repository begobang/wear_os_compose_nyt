// Generated by Dagger (https://dagger.dev).
package com.nttdata.data.remoteDataSource;

import com.nttdata.data.services.GetFilmPicksService;
import com.rocket.core.crashreporting.logger.CrashLogger;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GetFilmPicksRemoteDataSource_Factory implements Factory<GetFilmPicksRemoteDataSource> {
  private final Provider<GetFilmPicksService> serviceProvider;

  private final Provider<CrashLogger> crashLoggerProvider;

  public GetFilmPicksRemoteDataSource_Factory(Provider<GetFilmPicksService> serviceProvider,
      Provider<CrashLogger> crashLoggerProvider) {
    this.serviceProvider = serviceProvider;
    this.crashLoggerProvider = crashLoggerProvider;
  }

  @Override
  public GetFilmPicksRemoteDataSource get() {
    return newInstance(serviceProvider.get(), crashLoggerProvider.get());
  }

  public static GetFilmPicksRemoteDataSource_Factory create(
      Provider<GetFilmPicksService> serviceProvider, Provider<CrashLogger> crashLoggerProvider) {
    return new GetFilmPicksRemoteDataSource_Factory(serviceProvider, crashLoggerProvider);
  }

  public static GetFilmPicksRemoteDataSource newInstance(GetFilmPicksService service,
      CrashLogger crashLogger) {
    return new GetFilmPicksRemoteDataSource(service, crashLogger);
  }
}
