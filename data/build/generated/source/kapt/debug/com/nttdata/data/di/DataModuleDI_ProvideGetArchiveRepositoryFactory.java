// Generated by Dagger (https://dagger.dev).
package com.nttdata.data.di;

import com.nttdata.data.remoteDataSource.GetArchiveRemoteDataSource;
import com.nttdata.domain.archive.GetArchiveRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModuleDI_ProvideGetArchiveRepositoryFactory implements Factory<GetArchiveRepository> {
  private final DataModuleDI module;

  private final Provider<GetArchiveRemoteDataSource> remoteDataSourceProvider;

  public DataModuleDI_ProvideGetArchiveRepositoryFactory(DataModuleDI module,
      Provider<GetArchiveRemoteDataSource> remoteDataSourceProvider) {
    this.module = module;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public GetArchiveRepository get() {
    return provideGetArchiveRepository(module, remoteDataSourceProvider.get());
  }

  public static DataModuleDI_ProvideGetArchiveRepositoryFactory create(DataModuleDI module,
      Provider<GetArchiveRemoteDataSource> remoteDataSourceProvider) {
    return new DataModuleDI_ProvideGetArchiveRepositoryFactory(module, remoteDataSourceProvider);
  }

  public static GetArchiveRepository provideGetArchiveRepository(DataModuleDI instance,
      GetArchiveRemoteDataSource remoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetArchiveRepository(remoteDataSource));
  }
}
