// Generated by Dagger (https://dagger.dev).
package com.nttdata.data.di;

import com.nttdata.data.remoteDataSource.GetFilmPicksRemoteDataSource;
import com.nttdata.domain.films.GetFilmPicksRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModuleDI_ProvideGetFilmPicksRepositoryFactory implements Factory<GetFilmPicksRepository> {
  private final DataModuleDI module;

  private final Provider<GetFilmPicksRemoteDataSource> remoteDataSourceProvider;

  public DataModuleDI_ProvideGetFilmPicksRepositoryFactory(DataModuleDI module,
      Provider<GetFilmPicksRemoteDataSource> remoteDataSourceProvider) {
    this.module = module;
    this.remoteDataSourceProvider = remoteDataSourceProvider;
  }

  @Override
  public GetFilmPicksRepository get() {
    return provideGetFilmPicksRepository(module, remoteDataSourceProvider.get());
  }

  public static DataModuleDI_ProvideGetFilmPicksRepositoryFactory create(DataModuleDI module,
      Provider<GetFilmPicksRemoteDataSource> remoteDataSourceProvider) {
    return new DataModuleDI_ProvideGetFilmPicksRepositoryFactory(module, remoteDataSourceProvider);
  }

  public static GetFilmPicksRepository provideGetFilmPicksRepository(DataModuleDI instance,
      GetFilmPicksRemoteDataSource remoteDataSource) {
    return Preconditions.checkNotNullFromProvides(instance.provideGetFilmPicksRepository(remoteDataSource));
  }
}
