// Generated by Dagger (https://dagger.dev).
package com.nttdata.data.di;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import okhttp3.logging.HttpLoggingInterceptor;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModuleDI_ProvideOkHttpClientFactory implements Factory<OkHttpClient> {
  private final DataModuleDI module;

  private final Provider<HttpLoggingInterceptor> loggingInterceptorProvider;

  private final Provider<QueryInterceptor> queryInterceptorProvider;

  public DataModuleDI_ProvideOkHttpClientFactory(DataModuleDI module,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<QueryInterceptor> queryInterceptorProvider) {
    this.module = module;
    this.loggingInterceptorProvider = loggingInterceptorProvider;
    this.queryInterceptorProvider = queryInterceptorProvider;
  }

  @Override
  public OkHttpClient get() {
    return provideOkHttpClient(module, loggingInterceptorProvider.get(), queryInterceptorProvider.get());
  }

  public static DataModuleDI_ProvideOkHttpClientFactory create(DataModuleDI module,
      Provider<HttpLoggingInterceptor> loggingInterceptorProvider,
      Provider<QueryInterceptor> queryInterceptorProvider) {
    return new DataModuleDI_ProvideOkHttpClientFactory(module, loggingInterceptorProvider, queryInterceptorProvider);
  }

  public static OkHttpClient provideOkHttpClient(DataModuleDI instance,
      HttpLoggingInterceptor loggingInterceptor, QueryInterceptor queryInterceptor) {
    return Preconditions.checkNotNullFromProvides(instance.provideOkHttpClient(loggingInterceptor, queryInterceptor));
  }
}
