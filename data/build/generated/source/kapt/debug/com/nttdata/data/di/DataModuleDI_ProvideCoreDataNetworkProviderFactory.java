// Generated by Dagger (https://dagger.dev).
package com.nttdata.data.di;

import android.content.Context;
import com.rocket.android.core.data.network.di.CoreDataNetworkProvider;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModuleDI_ProvideCoreDataNetworkProviderFactory implements Factory<CoreDataNetworkProvider> {
  private final DataModuleDI module;

  private final Provider<Context> contextProvider;

  public DataModuleDI_ProvideCoreDataNetworkProviderFactory(DataModuleDI module,
      Provider<Context> contextProvider) {
    this.module = module;
    this.contextProvider = contextProvider;
  }

  @Override
  public CoreDataNetworkProvider get() {
    return provideCoreDataNetworkProvider(module, contextProvider.get());
  }

  public static DataModuleDI_ProvideCoreDataNetworkProviderFactory create(DataModuleDI module,
      Provider<Context> contextProvider) {
    return new DataModuleDI_ProvideCoreDataNetworkProviderFactory(module, contextProvider);
  }

  public static CoreDataNetworkProvider provideCoreDataNetworkProvider(DataModuleDI instance,
      Context context) {
    return Preconditions.checkNotNullFromProvides(instance.provideCoreDataNetworkProvider(context));
  }
}
