// Generated by Dagger (https://dagger.dev).
package com.nttdata.data.di;

import com.rocket.android.core.data.network.di.CoreDataNetworkProvider;
import com.rocket.core.crashreporting.logger.CrashLogger;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DataModuleDI_ProvideCrashLoggerFactory implements Factory<CrashLogger> {
  private final DataModuleDI module;

  private final Provider<CoreDataNetworkProvider> providerProvider;

  public DataModuleDI_ProvideCrashLoggerFactory(DataModuleDI module,
      Provider<CoreDataNetworkProvider> providerProvider) {
    this.module = module;
    this.providerProvider = providerProvider;
  }

  @Override
  public CrashLogger get() {
    return provideCrashLogger(module, providerProvider.get());
  }

  public static DataModuleDI_ProvideCrashLoggerFactory create(DataModuleDI module,
      Provider<CoreDataNetworkProvider> providerProvider) {
    return new DataModuleDI_ProvideCrashLoggerFactory(module, providerProvider);
  }

  public static CrashLogger provideCrashLogger(DataModuleDI instance,
      CoreDataNetworkProvider provider) {
    return Preconditions.checkNotNullFromProvides(instance.provideCrashLogger(provider));
  }
}
